/*
 * C++ implementation of lapack routine dorglq
 *
 * $Id: dorglq.cpp,v 1.6 1993/04/06 20:41:40 alv Exp $
 *
 *************************************************************
 *
 * Rogue Wave Software, Inc.
 * P.O. Box 2328
 * Corvallis, OR 97339
 *
 * Copyright (C) 1993.
 * This software is subject to copyright protection under the
 * laws of the United States and other countries.
 *
 *************************************************************
 *
 * Translated from the Fortran using Cobalt Blue's FOR_C++,
 * and then massaged slightly to Rogue Wave format.
 *
 * Translated by FOR_C++, v1.1 (P), on 02/18/93 at 07:36:44
 * FOR_C++ Options SET: alloc do=rt no=p pf=dlapack,xlapack,dbla s=dv str=l - prototypes
 *
 * $Log: dorglq.cpp,v $
 * Revision 1.6  1993/04/06 20:41:40  alv
 * added const to parameters; added include lapkdefs
 *
 * Revision 1.5  1993/03/19  18:41:23  alv
 * now passes chars explicitly, rather than indirection of a string, to shut up SUN warnings
 *
 * Revision 1.4  1993/03/19  17:18:24  alv
 * added RWLAPKDECL linkage specifier
 *
 * Revision 1.3  1993/03/09  16:14:40  alv
 * made parms const
 *
 * Revision 1.2  1993/03/05  23:16:13  alv
 * changed ref parms to const ref
 *
 * Revision 1.1  1993/03/03  16:07:58  alv
 * Initial revision
 *
 */

#if 0
#include "rw/lapkdefs.h"
#include "rw/bla.h"
#include "rw/lapack.h"
#include "rw/fortran.h" /* Fortran run time library */
#else
#include "level/lapack.h"
#endif

RWLAPKDECL void /*FUNCTION*/ dorglq(const long &m, const long &n, const long &k, double *a, 
 const long &lda, double tau[], double work[], const long &lwork, long &info)
{
#define A(I_,J_)  (*(a+(I_)*(lda)+(J_)))
// PARAMETER translations
const double ZERO = 0.0e0;
// end of PARAMETER translations

  long _do0, _do1, _do2, _do3, _do4, _do5, i, i_, ib, iinfo, 
   iws, j, j_, ki, kk, l, l_, ldwork, nb, nbmin, nx;

  
  //  -- LAPACK routine (version 1.0) --
  //     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
  //     Courant Institute, Argonne National Lab, and Rice University
  //     February 29, 1992
  
  //     .. Scalar Arguments ..
  //     ..
  //     .. Array Arguments ..
  //     ..
  
  //  Purpose
  //  =======
  
  //  DORGLQ generates an m by n real matrix Q with orthonormal rows,
  //  which is defined as the first m rows of a product of k elementary
  //  reflectors of order n
  
  //        Q  =  H(k) . . . H(2) H(1)
  
  //  as returned by DGELQF.
  
  //  Arguments
  //  =========
  
  //  M       (input) INTEGER
  //          The number of rows of the matrix Q. M >= 0.
  
  //  N       (input) INTEGER
  //          The number of columns of the matrix Q. N >= M.
  
  //  K       (input) INTEGER
  //          The number of elementary reflectors whose product defines the
  //          matrix Q. M >= K >= 0.
  
  //  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
  //          On entry, the i-th row must contain the vector which defines
  //          the elementary reflector H(i), for i = 1,2,...,k, as returned
  //          by DGELQF in the first k rows of its array argument A.
  //          On exit, the m by n matrix Q.
  
  //  LDA     (input) INTEGER
  //          The first dimension of the array A. LDA >= max(1,M).
  
  //  TAU     (input) DOUBLE PRECISION array, dimension (K)
  //          TAU(i) must contain the scalar factor of the elementary
  //          reflector H(i), as returned by DGELQF.
  
  //  WORK    (workspace) DOUBLE PRECISION array, dimension (LWORK)
  //          On exit, if INFO = 0, WORK(1) returns the minimum value of
  //          LWORK required to use the optimal blocksize.
  
  //  LWORK   (input) INTEGER
  //          The dimension of the array WORK. LWORK >= max(1,M).
  //          For optimum performance LWORK should be at least M*NB, where
  //          NB is the optimal blocksize.
  
  //  INFO    (output) INTEGER
  //          = 0: successful exit
  //          < 0: if INFO = -i, the i-th argument has an illegal value
  
  //  =====================================================================
  
  //     .. Parameters ..
  //     ..
  //     .. Local Scalars ..
  //     ..
  //     .. External Subroutines ..
  //     ..
  //     .. Intrinsic Functions ..
  //     ..
  //     .. External Functions ..
  //     ..
  //     .. Executable Statements ..
  
  //     Test the input arguments
  
  info = 0;
  if( m < 0 ) { 
    info = -1;
  }
  else if( n < m ) { 
    info = -2;
  }
  else if( k < 0 || k > m ) { 
    info = -3;
  }
  else if( lda < max( 1, m ) ) { 
    info = -5;
  }
  else if( lwork < max( 1, m ) ) { 
    info = -8;
  }
  if( info != 0 ) { 
    xerbla( "DORGLQ", -info );
    return;
  }
  
  //     Quick return if possible
  
  if( m <= 0 ) { 
    work[0] = 1;
    return;
  }
  
  //     Determine the block size.
  
  nb = ilaenv( 1, "DORGLQ", " ", m, n, k, -1 );
  nbmin = 2;
  nx = 0;
  iws = m;
  if( nb > 1 && nb < k ) { 
    
    //        Determine when to cross over from blocked to unblocked code.
    
    nx = max( 0, ilaenv( 3, "DORGLQ", " ", m, n, k, -1 ) );
    if( nx < k ) { 
      
      //           Determine if workspace is large enough for blocked code.
      
      ldwork = m;
      iws = ldwork*nb;
      if( lwork < iws ) { 
        
        //              Not enough workspace to use optimal NB:  reduce NB and
        //              determine the minimum value of NB.
        
        nb = lwork/ldwork;
        nbmin = max( 2, ilaenv( 2, "DORGLQ", " ", m, n, k, 
         -1 ) );
      }
    }
  }
  
  if( (nb >= nbmin && nb < k) && nx < k ) { 
    
    //        Use blocked code after the last block.
    //        The first kk rows are handled by the block method.
    
    ki = ((k - nx - 1)/nb)*nb;
    kk = min( k, ki + nb );
    
    //        Set A(kk+1:m,1:kk) to zero.
    
    for( j = 1, j_ = j - 1, _do0 = kk; j <= _do0; j++, j_++ ) { 
      for( i = kk + 1, i_ = i - 1, _do1 = m; i <= _do1; i++, i_++ ) { 
        A(j_,i_) = ZERO;
      }
    }
  }
  else { 
    kk = 0;
  }
  
  //     Use unblocked code for the last or only block.
  
  if( kk < m ) 
    dorgl2( m - kk, n - kk, k - kk, &A(kk,kk), lda, &tau[kk], 
     work, iinfo );
  
  if( kk > 0 ) { 
    
    //        Use blocked code
    
    for( i = ki + 1, i_ = i - 1, _do2=docnt(i,1,_do3 = -nb); _do2 > 0; i += _do3, i_ += _do3, _do2-- ) { 
      ib = min( nb, k - i + 1 );
      if( i + ib <= m ) { 
        
        //              Form the triangular factor of the block reflector
        //              H = H(i) H(i+1) . . . H(i+ib-1)
        
        dlarft( 'F'/* Forward */, 'R'/* Rowwise */, n - i + 
         1, ib, &A(i_,i_), lda, &tau[i_], work, ldwork );
        
        //              Apply H' to A(i+ib:m,i:n) from the right
        
        dlarfb( 'R'/* Right */, 'T'/* Transpose */, 'F'/* Forward */
         , 'R'/* Rowwise */, m - i - ib + 1, n - i + 1, ib, 
         &A(i_,i_), lda, work, ldwork, &A(i_,i_ + ib), lda, 
         &work[ib], ldwork );
      }
      
      //           Apply H' to columns i:n of current block
      
      dorgl2( ib, n - i + 1, ib, &A(i_,i_), lda, &tau[i_], work, 
       iinfo );
      
      //           Set columns 1:i-1 of current block to zero
      
      for( j = 1, j_ = j - 1, _do4 = i - 1; j <= _do4; j++, j_++ ) { 
        for( l = i, l_ = l - 1, _do5 = i + ib - 1; l <= _do5; l++, l_++ ) { 
          A(j_,l_) = ZERO;
        }
      }
    }
  }
  
  work[0] = iws;
  return;
  
  //     End of DORGLQ
  
#undef  A
} // end of function 

