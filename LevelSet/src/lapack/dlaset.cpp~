/*
 * C++ implementation of lapack routine dlaset
 *
 * $Id: dlaset.cpp,v 1.4 1993/04/06 20:41:27 alv Exp $
 *
 *************************************************************
 *
 * Rogue Wave Software, Inc.
 * P.O. Box 2328
 * Corvallis, OR 97339
 *
 * Copyright (C) 1993.
 * This software is subject to copyright protection under the
 * laws of the United States and other countries.
 *
 *************************************************************
 *
 * Translated from the Fortran using Cobalt Blue's FOR_C++,
 * and then massaged slightly to Rogue Wave format.
 *
 * Translated by FOR_C++, v1.1 (P), on 02/18/93 at 07:36:11
 * FOR_C++ Options SET: alloc do=rt no=p pf=dlapack,xlapack,dbla s=dv str=l - prototypes
 *
 * $Log: dlaset.cpp,v $
 * Revision 1.4  1993/04/06 20:41:27  alv
 * added const to parameters; added include lapkdefs
 *
 * Revision 1.3  1993/03/19  17:18:24  alv
 * added RWLAPKDECL linkage specifier
 *
 * Revision 1.2  1993/03/05  23:15:54  alv
 * changed ref parms to const ref
 *
 * Revision 1.1  1993/03/03  16:07:43  alv
 * Initial revision
 *
 */

#if 0
#include "rw/lapkdefs.h"
#include "rw/bla.h"
#include "rw/lapack.h"
#include "rw/fortran.h" /* Fortran run time library */
#else
#include "level/lapack.h"
#endif

RWLAPKDECL void /*FUNCTION*/ dlaset(const char &uplo, const long &m, const long &n, const double &alpha, 
   const double &beta, double *a, const long &lda)
{
#define A(I_,J_)  (*(a+(I_)*(lda)+(J_)))
  long _do0, _do1, _do2, _do3, _do4, _do5, _do6, i, i_, j, j_;

  
  //  -- LAPACK auxiliary routine (version 1.0) --
  //     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
  //     Courant Institute, Argonne National Lab, and Rice University
  //     February 29, 1992
  
  //     .. Scalar Arguments ..
  //     ..
  //     .. Array Arguments ..
  //     ..
  
  //  Purpose
  //  =======
  
  //  DLASET initializes an m-by-n matrix A to BETA on the diagonal and
  //  ALPHA on the offdiagonals.
  
  //  Arguments
  //  =========
  
  //  UPLO    (input) CHARACTER*1
  //          Specifies the part of the matrix A to be set.
  //          = 'U':      Upper triangular part is set; the strictly lower
  //                      triangular part of A is not changed.
  //          = 'L':      Lower triangular part is set; the strictly upper
  //                      triangular part of A is not changed.
  //          Otherwise:  All of the matrix A is set.
  
  //  M       (input) INTEGER
  //          The number of rows of the matrix A.  M >= 0.
  
  //  N       (input) INTEGER
  //          The number of columns of the matrix A.  N >= 0.
  
  //  ALPHA   (input) DOUBLE PRECISION
  //          The constant to which the offdiagonal elements are to be set.
  
  //  BETA    (input) DOUBLE PRECISION
  //          The constant to which the diagonal elements are to be set.
  
  //  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)
  //          On exit, the leading m-by-n submatrix of A is set as follows:
  
  //          if UPLO = 'U', A(i,j) = ALPHA, 1<=i<=j-1, 1<=j<=n,
  //          if UPLO = 'L', A(i,j) = ALPHA, j+1<=i<=m, 1<=j<=n,
  //          otherwise,     A(i,j) = ALPHA, 1<=i<=m, 1<=j<=n, i.ne.j,
  
  //          and, for all UPLO, A(i,i) = BETA, 1<=i<=min(m,n).
  
  //  LDA     (input) INTEGER
  //          The leading dimension of the array A.  LDA >= max(1,M).
  
  
  //     .. Local Scalars ..
  //     ..
  //     .. External Functions ..
  //     ..
  //     .. Intrinsic Functions ..
  //     ..
  //     .. Executable Statements ..
  
  if( lsame( uplo, 'U' ) ) { 
    
    //        Set the strictly upper triangular or trapezoidal part of the
    //        array to ALPHA.
    
    for( j = 2, j_ = j - 1, _do0 = n; j <= _do0; j++, j_++ ) { 
      for( i = 1, i_ = i - 1, _do1 = min( j - 1, m ); i <= _do1; i++, i_++ ) { 
        A(j_,i_) = alpha;
      }
    }
    
  }
  else if( lsame( uplo, 'L' ) ) { 
    
    //        Set the strictly lower triangular or trapezoidal part of the
    //        array to ALPHA.
    
    for( j = 1, j_ = j - 1, _do2 = min( m, n ); j <= _do2; j++, j_++ ) { 
      for( i = j + 1, i_ = i - 1, _do3 = m; i <= _do3; i++, i_++ ) { 
        A(j_,i_) = alpha;
      }
    }
    
  }
  else { 
    
    //        Set the leading m-by-n submatrix to ALPHA.
    
    for( j = 1, j_ = j - 1, _do4 = n; j <= _do4; j++, j_++ ) { 
      for( i = 1, i_ = i - 1, _do5 = m; i <= _do5; i++, i_++ ) { 
        A(j_,i_) = alpha;
      }
    }
  }
  
  //     Set the first min(M,N) diagonal elements to BETA.
  
  for( i = 1, i_ = i - 1, _do6 = min( m, n ); i <= _do6; i++, i_++ ) { 
    A(i_,i_) = beta;
  }
  
  return;
  
  //     End of DLASET
  
#undef  A
} // end of function 

